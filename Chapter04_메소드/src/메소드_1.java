/*
 * 메소드: 한개의 기능 수행하는 명령문의 집합
 * 		 --------        ---- 변수, 제어문, 연산자
 * 1) 메소드 구조
	 * 	  [접근지정어/옵션] 리턴형 메소드명(매개변수목록) => 선언문
	 * { 
	 * 	구현
	 *  ...
	 *  ...
	 *  return 값
	 *  => void로 선언시에는 return을 생략 가능(컴파일러에 의해 자동추가)
	 *  => return 문장은 메소드의 종료(void형이 아니면 반드시 필요)
	 *  }
	 *  메소드 : 호출 => 메소드는 처음부터 끝까지 실행하고 원래 호출한 위치로 넘어온다
	 *  => 반복적인 문장이 있는 경우(반복 제거)
	 *  => 기능별 분리하기 때문에 코드가 간결하다
	 *     -------- 수정 용이
	 *     			에러 처리 편리
	 *  => 다른 클래스와 연결시에 주로 사용
	 *  => 객체 지향: 변수 / 메소드
	 *  => 클래스의 구성: 변수 / 메소드
	 *  => 메소드의 장점 : 분산이 가능(여러명이 동시 개발 가능)
 * 2) 리턴형 결정
	 * 사용자가 요청에 대한 결과값을 도출
	 * => 한개만 설정이 가능
	 *    : 여러개 => 묶어서 전송
	 *    			-------- 한개로 인식(배열 , 클래스)
	 *  = 결과값이 있는 경우 => 결과값 설정
	 *  				   = 기본형
	 *   				   = 배열
	 *  = 경과값이 없는 경우 (메소드 자체에서 처리) => void - 결과를 메소드에서 출력
	 *  = 리턴형과 결과값은 가급적이면 동일
	 *    *** 리턴형 >= 결과값 
 * 3) 매개변수 : 사용자로부터 요청을 받은 값
 *            ---------------------
 *            예) 
 *            	 로그인 요청 => ID,PWD
 *            	 아이디 체크 => ID
 *            	 우편번호 검색 => 동/읍/면
 *            	 영화 검색 => 검색어
 *            => 여러개를 사요할 수 있다
 *            => 가급적이면 매개변수는 적게 사용하는 것이 좋다
 *                       --------------- => 3개 이하
 *                                          => 3개 이상일 시 배열, 클래스(다른 데어터형 집합)
 *            => 예측을 못하는 경우
 *               -------------- => 가변 매개변수 (...) => 필요한 만큼 넣을 수 있음 // 다중검색 (체크박스)  
 * 4) 메소드명
 *   => 식별자 이용(변수명칭법과 동일) + 상수/클레스/인터페이스/열거형
 *      --------
 *      1. 알파벳이나 한글로 시작
 *         ---- 운영체제에 영향이 없다(윈도우,리눅스,맥)
 *         ---- 소프트웨어 이식(개발 => 윈도우->리눅스) -> 편집기로 작성 후 리눅스로 이식
 *      2. 숫자 사용이 가능(앞에 사용 금지)
 *      3. 특수문자(_ , $)
 *      4. 키워드는 사용 불가
 *      5. 공백 불가
 *      6. 메소드명의 길이 제한 없음 (3-10자 권장)
 *         => 추가 메소드(board_insert , boardInsert)
 *      7. 약속
 *         => 소문자부터 시작
 *         => 두개의 단어일 경루 두번째 문자 대문자 (헝거리언식 표기)
 * 5) 호출 => 실행과정
 * 	  입력: 사용자로부터 전송 => 매개변수
 * 		   Scanner / BufferedReader = 예외처리, io / Random
 *        => 윈도우 , 웹 => 입력창 => 버튼 / 엔터
 *        	 <input type = text>
 *        	 <input type = password>
 *        	 <input type = button>
 *    처리 (요청 처리) => 결과값, 결과겂이 없는 경우
 */
// 1. 매개변수(X) , 리턴형(X) => 자체 출력
// ==> 리턴형이 없는 경우가 많이 존재 => 전역 변수로 저장하여 저장
// 
public class 메소드_1 {
	static int a = 10;
	static void aaa() {
		a = 100;
	} // 리턴값을 주지 않아도 값 변동
	public static void main(String[] args) {
		aaa();
		System.out.println("a= "+a);
	}

}
